//Singly Circular Link List
import java.util.*;
class B
{
	Scanner sc =  new Scanner(System.in);
	int total;
	class Node
	{
		int data;
		Node next;
		Node(int data)
		{
			this.data = data;
			next = null;
		}
	}
		int value;
		Node temp = null;
		Node first = null;
		Node last = null;
		Node curr = null;
		Node currPrev = null;
		Node currNext = null;
		void createNode()
		{
			System.out.print("\nEnter Value : ");
			value = sc.nextInt();
			temp = new Node(value);
		}
		void createLinkedList()
		{
			createNode();
			if(first == null)
			{
				first = last = temp;
			}
			else
			{
				last.next = temp;
				last =  temp;
			}
			last.next = first;
			display();
		}
		void display()
		{
			curr = first;
			do
			{
				System.out.print("|"+curr.data+"| ==> ");
				curr = curr.next;
			}while(curr != first);
			System.out.print("\n");
		}
		void totalNode()
		{
			curr = first;
			int count = 1;
			do
			{
				curr = curr.next;
				count = count + 1;
			}while(curr != last);
			System.out.print("\nTotal Node : "+count+"\n");
			total = count;
			display();
		}
		void searchPosition()
		{
			System.out.print("\nEnter node value to search its position : ");
			value = sc.nextInt();
			curr = first;
			int count = 1;
			while(curr != null && curr.data != value)
			{
				curr = curr.next;
				count = count + 1;
			}
			if(curr == null)
			{
				System.out.print("\nNot Find This Value ....!!!\n");
				return;
			}
			else
			{
				System.out.print("\n" + value + " is position at " + count+"\n");
			}
			display();
		}
		void insertAtFirst()
		{
			createNode();
			last.next = temp;
			temp.next = first;
			first = temp;
			display();
		}
		void insertAtLast()
		{
			createNode();
			last.next = temp;
			last = temp;
			last.next = first;
			display();
		}
		void insertSpecificPosition()
		{
			System.out.print("\nEnter Position : ");
			int p = sc.nextInt();
			createNode();
			curr = first;
			for(int i=0;i<p-2;i++)
			{
				curr = curr.next;
			}
			temp.next = curr.next;
			curr.next = temp;
			display();
		}
		void insertAfterSpecificNode()
		{
			System.out.print("\nEnter Node Value : ");
			value = sc.nextInt();
			curr = first;
			int f = 0;
			do
			{
				if(curr.data == value && curr == last)
				{
					createNode();
					last.next=temp;
					last=temp;	
					last.next=first;
					display();	
					return;	
				}
				else if(curr.data == value)
				{ 
					createNode();
					temp.next = curr.next;
					curr.next = temp;
					display();
					return ;
				}
				curr = curr.next;
			}while(curr != first);
			if(f == 0)
			{
				System.out.print("\nValue not found\n");
			}
			display();
		}
		void insertBeforeSpecificNode()
		{
			System.out.print("\nEnter Node Value : ");
			int val=sc.nextInt();
			curr = first;
			if(curr.data == val)
			{
				insertfirst();
				return;
			}
			int a = 0;
			do
			{
				if(curr.next.data == val)
				{
					createnode();	
					temp.next = curr.next;
					curr.next = temp;
					display();
					return;
				}
				curr = curr.next;
			
			}while(curr != first);
			if(curr == first)
			{
				System.out.println("value not find");
				display();
			}
			display();
		}
		void deleteAtFirst()
		{
			first = first.next;
			last.next = first;
			display();
		}
		void deleteAtLast()
		{
			if(first == last)
			{
				System.out.print("");
				first = last = null;
				return;
			}
			curr = first;
			while(curr.next != last)
			{
				curr = curr.next;
			}
			curr.next = null;
			last = curr;
			last.next = first;
			display();
		}
		void deleteSpecificPosition()
		{
			System.out.print("\nEnter Position : ");
			int p = sc.nextInt();
			curr = first;
			currNext = curr.next;
			for(int i=0;i<p-2;i++)
			{
				curr = currNext;
				currNext = currNext.next;
			}
			curr.next = currNext.next;
			display();
		}
		void deleteSpecificNode()
		{			
			System.out.print("\nEnter Node Value : ");
			value = sc.nextInt();
			curr = first;
			currNext = curr.next;
			while(curr.next.data != value)
			{
				curr = curr.next;
				currNext = currNext.next;
			}
			System.out.print("\nDeleted Node : "+curr.next.data+"\n");
			curr.next = currNext.next;
			display();
		}
		void updateNode()
		{
			System.out.print("\nEnter Node Value for update : ");
			value = sc.nextInt();
			System.out.print("\nEnter New Node Value  : ");
			int value1 = sc.nextInt();
			curr = first;
			currNext = curr.next;
			while(curr.next.data != value)
			{
				curr = curr.next;
				currNext = currNext.next;
			}
			System.out.print("\nDeleted Node : "+curr.next.data+"\n");
			currNext.data = value1;
			display();
		}
		void createReverseLL()
		{
			try{
			currNext = null;
			currPrev = null;
			curr = last = first;
			do
			{
				currNext = curr.next;
				curr.next = currPrev;
				currPrev = curr;
				curr = currNext;
			}while(curr != last);
			first = currPrev;
			display();
			System.out.println("");
			}
			catch(Exception e){}
		}
		void displayReverseLL()
		{
			curr = first;
			String s = "";
			do
			{
				s = "|" + curr.data + "| ==> " + s + "\n";
				curr = curr.next;
			}while(curr != first);
			System.out.print(s);
		}
}
class A
{
	public static void main(String args[])
	{
		B b = new B();
		Scanner sc =  new Scanner(System.in);
		int choice;
		do
		{
			System.out.print("\n0.Exit");
			System.out.print("\n1.Create Linked List");
			System.out.print("\n2.Display");
			System.out.print("\n3.Display total node in linked list");
			System.out.print("\n4.Search specific node and also display its position");
			System.out.print("\n5.Insert node at last");
			System.out.print("\n6.Insert node at first");
			System.out.print("\n7.Insert Node at specific position");
			System.out.print("\n8.Insert Node after specific node");
			System.out.print("\n9.Insert Node before specific node");
			System.out.print("\n10.Delete last node");
			System.out.print("\n11.Delete first node");
			System.out.print("\n12.Delete node from specific position");
			System.out.print("\n13.Find and delete specific node");
			System.out.print("\n14.Find and update value of specific node");
			System.out.print("\n15.Display linked list in reverse order");
			System.out.print("\n16.Create linked list in reverse order");
			System.out.print("\n\nEnter Your Choice : ");
			choice = sc.nextInt();
			switch(choice)
			{
				case 0:
					System.exit(0);
					break;
				case 1:
					b.createLinkedList();
					break;
				case 2:
					b.display();
					break;
				case 3:
					b.totalNode();
					break;
				case 4:
					b.searchPosition();
					break;
				case 5:
					b.insertAtLast();
					break;
				case 6:
					b.insertAtFirst();
					break;
				case 7:
					b.insertSpecificPosition();
					break;
				case 8:
					b.insertAfterSpecificNode();
					break;
				case 9:
					b.insertBeforeSpecificNode();
					break;
				case 10:
					b.deleteAtLast();
					break;
				case 11:
					b.deleteAtFirst();
					break;
				case 12:
					b.deleteSpecificPosition();
					break;
				case 13:
					b.deleteSpecificNode();
					break;
				case 14:
					b.updateNode();
					break;
				case 15:
					b.displayReverseLL();
					break;
				case 16:
					b.createReverseLL();
					break;
				default:
					System.out.print("\nEnter Currect Choice\n");
					break;
			}
		}while(choice != 0);
	}
}